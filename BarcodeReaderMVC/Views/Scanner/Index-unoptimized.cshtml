@{
    ViewBag.Title = "Scan Barcode";
}

<h2>Scan Barcode</h2>

<div id="video-container" style="width: 350px; height: 250px; overflow: hidden;">
    <video id="video" style="border: 1px solid gray; transform: translate(-15%, -25%)" width="500" height="500" autoplay></video>
</div>

<div id="response-container">
    <p>No barcode detected.</p>
</div>

<!-- Camera Selection Dropdown -->
<div>
    <label for="cameraSelect">Select Camera:</label>
    <select id="cameraSelect" style="margin-bottom: 15px;">
        <option selected>Kamera Seçiniz</option>
    </select>
</div>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const videoRef = document.querySelector("video");
            const canvas = document.createElement("canvas");
            const context = canvas.getContext("2d");
            const constrains = {
                video: {
                    height: 1280,
                    width: 720
                }
            };

            let currentStream = null;

            // Checking for the mediaDevices support
            if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
                // Get the environment camera (usually the rear camera on a smartphone)
                navigator.mediaDevices.getUserMedia(constrains)
                    .then((stream) => {
                        // Get the environment camera (usually the rear camera on a smartphone)
                        navigator.mediaDevices.enumerateDevices()
                            .then((devices) => {
                                let videoInputs = devices.filter((device) => device.kind === 'videoinput');
                                // Populate the select menu
                                populateSelectMenu(videoInputs);

                                // Find the back camera
                                const backCamera = videoInputs.find(device => device.label.toLowerCase().includes('back'));
                                const defaultCameraId = backCamera ? backCamera.deviceId : videoInputs[videoInputs.length - 1].deviceId;

                                //let selectedDeviceId = devicess[0]?.deviceId;
                                //let selectedDeviceId = devicess[devicess.length - 1]?.deviceId;
                                //if (selectedDeviceId) {
                                startCamera(defaultCameraId);
                                //}
                            }).catch((error) => {
                                setError(`Error enumerating devices: ${error}`);
                            });
                    })
                    .catch((error) => {
                        console.error("Error opening video camera.", error);
                    });

                const populateSelectMenu = (videoInputs) => {
                    const select = document.getElementById("cameraSelect");
                    videoInputs.forEach((camera) => {
                        const option = document.createElement("option");
                        option.value = camera.deviceId;
                        option.text = camera.label;
                        select.appendChild(option);
                    });

                    select.addEventListener("change", (event) => {
                        startCamera(event.target.value);
                    });
                }


                const startCamera = (cameraId) => {
                    if (currentStream) {
                        currentStream.getTracks().forEach((track) => {
                            track.stop();
                            currentStream.removeTrack(track);
                        });
                    }

                    navigator.mediaDevices.getUserMedia({
                        video: {
                            deviceId: { exact: cameraId }
                        }
                    })
                        .then(async (stream) => {
                            currentStream = stream;
                            videoRef.srcObject = stream;
                            videoRef.setAttribute("playsinline", "true"); // required to tell iOS safari we don't want fullscreen
                            await videoRef.play();

                            // Continuously capture and send frames to the server
                            setInterval(() => {
                                captureAndSendFrame();
                            }, 500); // Adjust the interval as needed
                        })
                        .catch((error) => {
                            console.error("Error opening video camera.", error);
                        });
                }

                const captureAndSendFrame = async () => {
                    if (videoRef) {
                        canvas.width = videoRef.videoWidth;
                        canvas.height = videoRef.videoHeight;
                        context.drawImage(videoRef, 0, 0, canvas.width, canvas.height);

                        // Convert the canvas to a data URL (Base64)
                        const imageDataUrl = canvas.toDataURL();

                        try {
                            // Create an object to send to the server
                            const rawImageData = {
                                Value: imageDataUrl,
                                Width: canvas.width,
                                Height: canvas.height
                            };

                            // Send the image data URL to the server using Fetch API
                            let response = await fetch('/Scanner/Scan', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify(rawImageData)
                            });

                            if (!response.ok) {
                                throw new Error(`Network response was not ok, status: ${response.status}`);
                            }

                            // Handle the response from the server
                            let serverResponse = await response.json();
                            if (serverResponse) {
                                console.log(serverResponse)
                                updatePageWithResponse(serverResponse);
                            }
                        } catch (error) {
                            console.error("Error sending frame to the server: " + error.message);
                        }
                    }
                };

                // Call this function to update the page if the response from the server is successful
                function updatePageWithResponse(response) {
                    const container = document.getElementById('response-container');
                    if (response.success && response.text) {
                        beep();
                        container.innerHTML = `<p>Barcode Text: ${response.text}</p>`;
                    }
                }

                function beep() {
                    var snd = new Audio("data:audio/wav;base64,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qJrx4KOQjahZxWbcZgztj2c49nKmkId44S71j0c8eV9yDK6uPRzx5X18eDvjvQ6yKo9ZSS6l//8elePK/Lf//IInrOF/FvDoADYAGBMGb7FtErm5MXMlmPAJQVgWta7Zx2go+8xJ0UiCb8LHHdftWyLJE0QIAIsI+UbXu67dZMjmgDGCGl1H+vpF4NSDckSIkk7Vd+sxEhBQMRU8j/12UIRhzSaUdQ+rQU5kGeFxm+hb1oh6pWWmv3uvmReDl0UnvtapVaIzo1jZbf/pD6ElLqSX+rUmOQNpJFa/r+sa4e/pBlAABoAAAAA3CUgShLdGIxsY7AUABPRrgCABdDuQ5GC7DqPQCgbbJUAoRSUj+NIEig0YfyWUho1VBBBA//uQZB4ABZx5zfMakeAAAAmwAAAAF5F3P0w9GtAAACfAAAAAwLhMDmAYWMgVEG1U0FIGCBgXBXAtfMH10000EEEEEECUBYln03TTTdNBDZopopYvrTTdNa325mImNg3TTPV9q3pmY0xoO6bv3r00y+IDGid/9aaaZTGMuj9mpu9Mpio1dXrr5HERTZSmqU36A3CumzN/9Robv/Xx4v9ijkSRSNLQhAWumap82WRSBUqXStV/YcS+XVLnSS+WLDroqArFkMEsAS+eWmrUzrO0oEmE40RlMZ5+ODIkAyKAGUwZ3mVKmcamcJnMW26MRPgUw6j+LkhyHGVGYjSUUKNpuJUQoOIAyDvEyG8S5yfK6dhZc0Tx1KI/gviKL6qvvFs1+bWtaz58uUNnryq6kt5RzOCkPWlVqVX2a/EEBUdU1KrXLf40GoiiFXK///qpoiDXrOgqDR38JB0bw7SoL+ZB9o1RCkQjQ2CBYZKd/+VJxZRRZlqSkKiws0WFxUyCwsKiMy7hUVFhIaCrNQsKkTIsLivwKKigsj8XYlwt/WKi2N4d//uQRCSAAjURNIHpMZBGYiaQPSYyAAABLAAAAAAAACWAAAAApUF/Mg+0aohSIRobBAsMlO//Kk4soosy1JSFRYWaLC4qZBYWFRGZdwqKiwkNBVmoWFSJkWFxX4FFRQWR+LsS4W/rFRb/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////VEFHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAU291bmRib3kuZGUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMjAwNGh0dHA6Ly93d3cuc291bmRib3kuZGUAAAAAAAAAACU=");
                    snd.play();
                }
            } else {
                setError("No camera found on this device.");
            }
        });
    </script>
}
